/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.pjk.dayschedule;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.time.LocalTime;
import java.util.HashMap;
import javax.swing.JLabel;
import javax.swing.SwingConstants;

/**
 *
 * @author pkacperski
 */
public class SchedulePanel extends javax.swing.JPanel {

  private enum MouseTool {
    None,
    Move,
    MoveStart,
    MoveStop,
    Draw
  }

  private enum HitTestEdge {
    None,
    Top,
    Bottom
  }

  private class HitTestInfo {

    private final HitTestEdge edge;
    private final ScheduleTableElement element;

    public HitTestInfo(HitTestEdge edge, ScheduleTableElement element) {
      this.edge = edge;
      this.element = element;
    }

    public HitTestEdge getEdge() {
      return edge;
    }

    public ScheduleTableElement getElement() {
      return element;
    }
  }

  private static final String DEFAULT_CAPTION = "New Schedule Item";
  private final Cursor defaultCursor;
  private final Cursor moveCursor;
  private final Cursor resizeCursor;

  private final Color borderColor = new Color(235, 235, 235);
  private final int borderThickness = 2;
  private final Color selectionBorderColor = new Color(130, 156, 208);
  private final Color selectionBackColor = new Color(130, 156, 208, 128);
  private final int selectionBorderThickness = 1;
  private final Color elementColor = new Color(130, 156, 208);
  private final Color captionColor = Color.WHITE;

  private final Dimension preferredSize;
  private MouseTool mouseTool = MouseTool.None;
  private Point mouseDownPoint;
  private ScheduleTableElement selectedElement;

  private final HashMap<ScheduleTableElement, ScheduleItem> items = new HashMap<>();

  private final EditScheduleItemFormFactory editorFactory;

  public SchedulePanel() {
    // for designer only
    this(() -> {
      return new EditScheduleItemForm(null, true);
    });
  }

  /**
   * Creates new form Schedule
   *
   * @param editorFactory
   */
  public SchedulePanel(EditScheduleItemFormFactory editorFactory) {
    initComponents();
    generateLabels();

    this.editorFactory = editorFactory;
    defaultCursor = Cursor.getDefaultCursor();
    moveCursor = Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR);
    resizeCursor = Cursor.getPredefinedCursor(Cursor.N_RESIZE_CURSOR);

    preferredSize = new Dimension(300, 24 * CELL_HEIGHT - 23 * borderThickness);
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
   * content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setBackground(new java.awt.Color(255, 255, 255));
    setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
    addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
      public void mouseDragged(java.awt.event.MouseEvent evt) {
        formMouseDragged(evt);
      }
      public void mouseMoved(java.awt.event.MouseEvent evt) {
        formMouseMoved(evt);
      }
    });
    addMouseListener(new java.awt.event.MouseAdapter() {
      public void mousePressed(java.awt.event.MouseEvent evt) {
        formMousePressed(evt);
      }
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        formMouseReleased(evt);
      }
    });
    addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentResized(java.awt.event.ComponentEvent evt) {
        formComponentResized(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 300, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

  private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
    if (evt.getButton() == MouseEvent.BUTTON1) {
      if (evt.getClickCount() > 1) {
        var element = hitTest(evt.getPoint()).getElement();
        if (element != null) {
          if (edit(items.get(element))) {
            repaint();
          }
        }
      } else {
        mouseDownPoint = evt.getPoint();
        var hitTestInfo = hitTest(evt.getPoint());
        if (hitTestInfo != null) {
          switch (hitTestInfo.getEdge()) {
            case Top:
              mouseTool = MouseTool.MoveStart;
              break;
            case Bottom:
              mouseTool = MouseTool.MoveStop;
              break;
            case None:
              mouseTool = MouseTool.Move;
              break;
          }
          selectedElement = hitTestInfo.getElement();
        } else {
          mouseTool = MouseTool.Draw;
        }
      }
    }
  }//GEN-LAST:event_formMousePressed

  private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
    if (mouseTool != MouseTool.None) {
      var startTime = toLocalTime(selectedElement.getLocation().y);
      var stopTime = toLocalTime(selectedElement.getLocation().y + selectedElement.getDimension().height);

      switch (mouseTool) {
        case Move:
        case MoveStart:
        case MoveStop:
          var item = items.get(selectedElement);
          item.setStartTime(startTime);
          item.setStopTime(stopTime);
          break;

        case Draw:
          item = new ScheduleItem(startTime, stopTime, DEFAULT_CAPTION);
          if (edit(item)) {
            items.put(selectedElement, item);
          }
          break;
      }
      mouseTool = MouseTool.None;
      selectedElement = null;
      repaint();
    }
  }//GEN-LAST:event_formMouseReleased

  private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
    if (mouseTool != MouseTool.None) {
      var currentMousePoint = evt.getPoint();
      switch (mouseTool) {
        case Move:
          var offset = mouseDownPoint.y - currentMousePoint.y;
          selectedElement.getLocation().translate(0, -offset);
          mouseDownPoint = currentMousePoint;
          break;
        case MoveStart:
          offset = mouseDownPoint.y - currentMousePoint.y;
          selectedElement.getLocation().translate(0, -offset);
          selectedElement.getDimension().height += offset;
          mouseDownPoint = currentMousePoint;
          break;
        case MoveStop:
          offset = mouseDownPoint.y - currentMousePoint.y;
          selectedElement.getDimension().height += -offset;
          mouseDownPoint = currentMousePoint;
          break;
        case Draw:
          if (Math.abs(currentMousePoint.y - mouseDownPoint.y) >= 20) {
            var y = Math.min(mouseDownPoint.y, currentMousePoint.y);
            var height = Math.max(1, Math.abs(mouseDownPoint.y - currentMousePoint.y));
            if (selectedElement == null) {
              var insets = getInsets();
              var x = insets.left + CELL_WIDTH + ELEMENT_PADDING;
              var width = getElementMaximumWidth();
              selectedElement = new ScheduleTableElement(new Point(x, y), new Dimension(width, height));
            } else {
              selectedElement.getLocation().y = y;
              selectedElement.getDimension().height = height;
            }
          } else {
            selectedElement = null;
          }
          break;
      }
      repaint();
    }
  }//GEN-LAST:event_formMouseDragged

  private static final int BOUNDING_SIZE = 2;
  private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
    var hitTestInfo = hitTest(evt.getPoint());
    if (hitTestInfo != null) {
      if (hitTestInfo.getEdge() != HitTestEdge.None) {
        changeCursor(resizeCursor);
      } else {
        changeCursor(moveCursor);
      }
    } else {
      changeCursor(defaultCursor);
    }
  }//GEN-LAST:event_formMouseMoved

  private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
    var width = getElementMaximumWidth();
    for (var element : items.keySet()) {
      element.setDimension(new Dimension(width, element.getDimension().height));
    }
  }//GEN-LAST:event_formComponentResized

  private int getElementMaximumWidth() {
    var insets = getInsets();
    var x = insets.left + CELL_WIDTH + ELEMENT_PADDING;
    return getWidth() - x - insets.right - ELEMENT_PADDING - borderThickness;
  }

  private boolean edit(ScheduleItem item) {
    var editor = editorFactory.create();
    editor.setItem(item);
    editor.setVisible(true);
    var saved = editor.getDialogResult() == EditScheduleItemForm.DialogResult.Save;
    editor.dispose();
    return saved;
  }

  private LocalTime toLocalTime(int y) {
    if (y > 0) {
      y -= 1;
    }
    var hours = y / (CELL_HEIGHT - borderThickness);
    var minutes = (int) ((y % (CELL_HEIGHT - borderThickness)) * 60.0 / (CELL_HEIGHT - borderThickness));
    return LocalTime.of(hours, minutes);
  }

  private void changeCursor(Cursor newCursor) {
    if (getCursor() != newCursor) {
      setCursor(newCursor);
    }
  }

  private Rectangle getBoundingRectangle(ScheduleTableElement element) {
    var location = element.getLocation();
    var dimension = element.getDimension();

    return new Rectangle(location.x - BOUNDING_SIZE, location.y - BOUNDING_SIZE,
            dimension.width + 2 * BOUNDING_SIZE, dimension.height + 2 * BOUNDING_SIZE);
  }

  private HitTestInfo hitTest(Point p) {
    for (var element : items.keySet()) {
      var rect = getBoundingRectangle(element);
      if (rect.contains(p)) {
        if (p.y - rect.y <= 2 * BOUNDING_SIZE) {
          return new HitTestInfo(HitTestEdge.Top, element);
        } else if (rect.y + rect.height - p.y <= 2 * BOUNDING_SIZE) {
          return new HitTestInfo(HitTestEdge.Bottom, element);
        } else {
          return new HitTestInfo(HitTestEdge.None, element);
        }
      }
    }
    return null;
  }

  private static final int CELL_HEIGHT = 80;
  private static final int CELL_WIDTH = 80;
  private static final int ELEMENT_PADDING = 6;

  private void generateLabels() {
    var insets = getInsets();
    var x = insets.left;
    var y = insets.top;

    for (var i = 0; i < 24; ++i) {
      var hour = i <= 12 ? i : i - 12;
      var label = createLabel("" + hour + " " + (i < 12 ? "AM" : "PM"), x, y);
      add(label);
      y += CELL_HEIGHT - borderThickness;
    }
  }

  private JLabel createLabel(String text, int x, int y) {
    var label = new JLabel(text);
    label.setVerticalAlignment(SwingConstants.TOP);
    label.setHorizontalAlignment(SwingConstants.RIGHT);
    label.setSize(CELL_WIDTH - 2 * borderThickness, CELL_HEIGHT - 2 * borderThickness);
    label.setLocation(x + borderThickness, y + borderThickness);
    label.setFont(getFont());
    return label;
  }

  @Override
  public Dimension getPreferredSize() {
    return preferredSize;
  }

  @Override
  protected void paintComponent(Graphics g) {
    super.paintComponent(g);
    paintComponent((Graphics2D) g);
  }

  private void paintComponent(Graphics2D g) {
    paintGrid(g);
    paintElements(g);
    if (mouseTool == MouseTool.Draw && selectedElement != null) {
      paintDrawnElement(g);
    }
  }

  private void paintElements(Graphics2D g) {
    g.setFont(getFont());
    items.forEach((element, item) -> {
      var location = element.getLocation();
      var dimension = element.getDimension();
      g.setPaint(elementColor);
      g.fillRect(location.x, location.y, dimension.width, dimension.height);

      var height = g.getFontMetrics().getHeight();
      g.setPaint(captionColor);
      g.drawString(item.getCaption(), location.x + borderThickness, location.y + borderThickness + height);
    });
  }

  private void paintGrid(Graphics2D g) {
    var insets = getInsets();
    var x = insets.left;
    var y = insets.right;
    g.setStroke(new BasicStroke(borderThickness));
    g.setColor(borderColor);

    for (var i = 0; i < 24; ++i) {
      drawThickRectangle(g, x, y, CELL_WIDTH, CELL_HEIGHT, borderThickness);
      x += CELL_WIDTH - borderThickness;
      drawThickRectangle(g, x, y, getWidth() - x - insets.right, CELL_HEIGHT, borderThickness);
      x = insets.left;
      y += CELL_HEIGHT - borderThickness;
    }
  }

  private void paintDrawnElement(Graphics2D g) {
    var location = selectedElement.getLocation();
    var dimension = selectedElement.getDimension();

    g.setColor(selectionBorderColor);
    g.setPaint(selectionBackColor);
    g.setStroke(new BasicStroke(selectionBorderThickness));
    g.fillRect(location.x, location.y, dimension.width, dimension.height);
    drawThickRectangle(g, location.x, location.y, dimension.width, dimension.height, selectionBorderThickness);
  }

  private void drawThickRectangle(Graphics2D g, int x, int y, int width, int height, int thickness) {
    x += thickness / 2;
    y += thickness / 2;
    width -= thickness;
    height -= thickness;
    g.drawRect(x, y, width, height);
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
}
